# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

import sys

f_obj, name_v, rate, hours, bonus = sys.argv
print(f_obj)


def simple_calc(name_v, rate, hours, bonus):
    try:
        print(f'Сотрудник {name_v} заработал {int(rate) * int(hours) + int(bonus)}')
    except TypeError:
        print('Несоотвествующий тип данных')
        exit()


simple_calc(name_v, rate, hours, bonus)


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# Вариант с append (без LC)
list = [int(i) for i in input("Введите список чисел через пробел: ").split()]
result_list = []
for i in range(1, len(list)):
    if list[i] > list[i - 1]:
        (result_list.append(list[i]))
print("Исходный список: ", list)
print("Список, элементы которого больше предыдущего вар_1: ", result_list)

# Вариант с LC
result_list2 = [list[i] for i in range(1, len(list)) if list[i] > list[i - 1]]
print("Список, элементы которого больше предыдущего вар_2: ", result_list2)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

# Вариант с LC
print("Числа от 20 до 240 кратные 20 или 21: ", [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0])

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res_list = [i for i in my_list if my_list.count(i) == 1]
print(res_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

my_list = [i for i in range(100, 1001, 2)]
print(my_list)
res_s = reduce(lambda i_1, i_2: i_1 * i_2, my_list)
print(res_s)

# Проверка
my_list_1 = [i for i in range(1, 4, 1)]
print(my_list_1)
res_s1 = reduce(lambda i_1, i_2: i_1 * i_2, my_list_1)
print(res_s1)

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание,
# что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. Например,
# в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count, cycle

# итератор, генерирующий целые числа, начиная с указанного

list_int = []

x = int(input('Введите первое число последовательности: '))
y = int(input('Введите последнее число последовательности: '))

for i in count(x):
    if i > y:
        break
    print(i)
    list_int.append(i)
print(list_int)

# итератор, повторяющий элементы некоторого списка, определённого заранее
count = 0
for j in cycle(list_int):
    if count >= len(list_int)*3:
        break
    print(j)
    count += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count


def fact(n):
    factorial = 1
    for x in count(1):
        if x > n:
            break
        factorial = factorial * x
        yield factorial


n = int(input('Укажите целое положительное число: '))
i = 0
for el in fact(n):
    i += 1
    print(f'!{i} = {el}')
