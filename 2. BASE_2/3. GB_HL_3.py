# 1. Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть
# обработку ситуации деления на ноль.

def calc(*args):
    try:
        calc_1 = arg_1 / arg_2
        # calc_2 = calc_1 / arg_1
        # calc_3 = calc_2 * arg_2
    except ZeroDivisionError:
        return "На ноль делить нельзя!"
    return calc_1


try:
    arg_1 = float(input("Укажите аргумент 1: "))
    arg_2 = float(input("Укажите аргумент 2: "))
    print(f"Результат= {calc()}")
except ValueError:
    print("Ошибка значения")

# calc_1_val, calc_3_val = calc()

# print(f"Деление = {calc_1_val}; 2-й пример = {calc_3_val}")

# 2. Выполнить функцию, которая принимает несколько параметров,
# описывающих данные пользователя: имя, фамилия,год рождения, город проживания,
# email, телефон. Функция должна принимать параметры как именованные аргументы.
# Осуществить вывод данных о пользователе одной строкой.

def personal_data(name, lastname, year_of_birth, city, email, phone):
    return print(
        f"Ваши данные следующие - Имя: {name}, Фамилия: {lastname} ,Год рождения: {year_of_birth}, Город проживания: {city}, Email: {email} Телефон: {phone}.")


personal_data(name=input('Имя: '), lastname=input('Фамилия: '), year_of_birth=input('Год Рождения: '),
              city=input('Город проживания: '), email=input('email: '), phone=input('phone: '))

# 3. Реализовать функцию my_func(), которая принимает три позиционных
# аргумента и возвращает сумму наибольших двух аргументов.

def my_func(*args):
    try:
        arg_1 = float(input("Укажите аргумент 1: "))
        arg_2 = float(input("Укажите аргумент 2: "))
        arg_3 = float(input("Укажите аргумент 3: "))
    except ValueError:
        print("Ошибка значения")
    x = [arg_1, arg_2, arg_3]
    x.remove(min(x))
    return sum(x)


print(my_func())

# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y).
# При решении задания нужно обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

# Вариант 1
def my_func(*args):
    try:
        arg_1 = float(input(
            "Призведем расчет функции x^Y \n Для основание степени X введите действительное положительное число: "))
        arg_2 = int(input("Для степени Y введите целое отрицательное число: "))
    except ValueError:
        return "Ошибка значения, введите аргументы заново"
    if arg_1 < 0:
        return (print('Вы ввели не действительное положительное число для X'))
    if arg_2 > 0:
        return (print('Вы ввели не целое отрицательное число для Y'))
    my_func_val = arg_1 ** arg_2
    return my_func_val


print(f"Результат= {my_func()}")


# Вариант 2
def my_func(*args):
    try:
        arg_1 = float(input(
            "Призведем расчет функции x^У \n Для основание степени X введите действительное положительное число: "))
        arg_2 = int(input("Для степени Y введите целое отрицательное число: "))
    except ValueError:
        return "Ошибка значения, введите аргументы заново"
    if arg_1 < 0:
        return (print('Вы ввели не действительное положительное число для X'))
    if arg_2 > 0:
        return (print('Вы ввели не целое отрицательное число для Y'))
    count_n = 1
    result_n = 1 / arg_1
    while count_n < abs(arg_2):
        result_n = result_n * (1 / arg_1)
        count_n += 1
    return result_n


print(my_func())

# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел,
# разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму
# этих чисел к полученной ранее сумме и после этого завершить программу.

def my_sum():
    sum_res = 0
    ex = False
    while ex == False:
        number = input('Input numbers or Q for quit - ').split()

        res = 0
        for el in range(len(number)):
            if number[el] == 'q' or number[el] == 'Q':
                ex = True
                break
            else:
                res = res + int(number[el])
        sum_res = sum_res + res
        print(f'Current sum is {sum_res}')
    print(f'Your final sum is {sum_res}')


my_sum()

# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.

def int_func(text):
    return text.title()
print(int_func(input('Введите текст через пробел: ')))

# 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но
# каждое слово должно начинаться с заглавной буквы. Используйте написанную ранее функцию int_func().

def my_title(text):
    listed_text = list(text)
    listed_text[0] = listed_text[0].upper()
    return ''.join(listed_text)


output_1 = []

for word in input('Введите строку, слова в которой разделены пробелами: ').split(' '):
    output_1.append(my_title(word))

print(f'Текст преобразован: {" ".join(output_1)}')
