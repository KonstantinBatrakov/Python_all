# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# Решение №1, которое лучше не делать. Но оно рабочее.
my_list = [1, None, 9.5, -20, True, 'False', 9 / 5, (1, 2)]
for i in range(len(my_list)):
    print(f"Тип переменной {my_list[i]}: {type(my_list[i])}")

# Решение №2.
my_list = [1, None, 9.5, -20, True, 'False', 9 / 5, (1, 2)]
for el in my_list:
    print(type(el))

# 2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию input().

# Решение №1
q = int(input("Из скольких элементов список?\n\t Введите количество: "))
my_lst = []
for i in range(q):
    my_lst.append(input(f"Элемент # {i + 1} : "))
print(f"Ваш текущий список:\n{my_lst}")
for x in range(0, (len(my_lst) - 1), 2):
    my_lst[x], my_lst[x + 1] = my_lst[x + 1], my_lst[x]
print(f"Ваш измененный список:\n{my_lst}")

# Решение №2
my_list = input("введите числа через пробел: ").split(' ')
print(f"now_len:\n{my_list}")
i, j = 0, 1
while j < len(my_list):
    my_list[i], my_list[j] = my_list[j], my_list[i]
    i += 2
    j += 2
print(f"after_list:\n{my_list}")
print("after_list:", my_list)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц
# (зима, весна, лето, осень). Напишите решения через list и dict.

# Решение №1
month = int(input("Введите месяц от 1 до 12 : "))
mlist = ["зима", "весна", "лето", "осень"]
while True:
    if month > 12 or month <= 0:
        print(f"\tНеыерное число!!! \n\tПожалуйста введите число от 1 до 12!")
        month = int(input("Please enter month id from 1 to 12 : "))
        continue
    mlist = ["зима", "весна", "лето", "осень"]
    if month == 12 or (month >= 1 and month < 3):
        print(f"\tМесяц #{month}  относится к сезону '{mlist[0]}'")
        break
    elif month >= 3 and month < 6:
        print(f"\tМесяц # {month} относится к сезону '{mlist[1]}'")
        break
    elif month >= 6 and month < 9:
        print(f"\tМесяц # {month} относится к сезону '{mlist[2]}'")
        break
    elif month >= 9 and month < 12:
        print(f"\tМесяц # {month} относится к сезону '{mlist[3]}'")
        break

# Решение №2
my_dict = {1: "Winter", 2: "Winter", 3: "Spring", 4: "Spring", 5: "Spring", 6: "Summer", 7: "Summer", 8: "Summer",
           9: "Autumn", 10: "Autumn", 11: "Autumn", 12: "Winter"}
# my_dict = {"Winter": [1, 2, 12], "Spring": [3, 4, 5], "Summer": [6, 7, 8], "Autumn": [9, 10, 11]}
month_num = int(input("Input number month from 1 to 12: "))
print(f"As a Result you choice: {my_dict.get(month_num)}")

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

# Example 1
text = input("Пожалуйста введите текст : ")
T = text.split()
for x, y in enumerate(T, start=1):
    if len(y) > 10:
        y = y[:10]
        print(x, y)
    else:
        print(x, y)

# Example 2
my_list = input("Please write text: ").split()
n = 1
for elem in my_list:
    if len(my_list) > 10:
        print(f"{n}. {elem[:10]}")
    else:
        print(f"{n}. {elem}")
        n += 1

# Example 3
for i, el in enumerate(my_list, 1):
    print(f"{i}) {el[:10]}")

# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. У пользователя нужно
# запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же
# значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

# Example 1
rate_list = [7, 5, 3, 3, 2]
frq = int(input("Сколько чисел вы хотите добавить?\n\t Введите кол-во: "))
for j in range(frq):
    add_new = int(input("Какое число вы хотите добавить?\n\t Введите число: "))
    if add_new in rate_list:
        i = rate_list.index(add_new)
        while (i + 1) <= (len(rate_list) - 1) and (rate_list[i] == rate_list[i + 1]):
            i += 1
        rate_list.insert(i, add_new)
        print(f"Обновленный список {rate_list}")
    else:
        if add_new <= rate_list[-1]:
            rate_list.append(add_new)
            print(f"Обновленный список {rate_list}")
        else:
            rate_list.insert(0, add_new)
            print(f"Обновленный список {rate_list}")

# Example 2
my_list = [7, 5, 3, 3, 2]
while True:
    n = input("Какое число вы хотите добавить? Или введите 'q' для выхода\n\t Введите число: ")
    if n != "q":
        my_list.append(int(n))
        my_list.sort(reverse=True)
        print(my_list)
    else:
        break

# Задание 6.
# Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

# Пример готовой структуры:
#[
#    (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
#    (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
#    (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
#]

# Далее необходимо собрать аналитику о товарах. Реализовать словарь,
# в котором каждый ключ — характеристика товара, например название,
#а значение — список значений-характеристик, например список названий товаров.

# Пример:

#{
#“названия”: [“компьютер”, “принтер”, “сканер”],
#“цены”: [20000, 6000, 2000],
#“количества”: [5, 2, 7],
#“ед”: [“шт.”]
#}


my_lst = []
while True:
    my_lst.append((input("Номер товара: "),
                   {"Название": input("Название: "),
                    "Цена": input("Цена: "),
                    "Количество": input("Количество: "),
                    "ед.": input("Единицы учёта: ")}))
    q = input("Закончить ввод позиций? Да, Нет: ")
    if q == "Да":
        break

my_lst = [(1, {"название": "компьютер", "цена": 20000, "количество": 5, "eд": "шт."}),
          (2, {"название": "принтер", "цена": 6000, "количество": 2, "eд": "шт."}),
          (3, {"название": "сканер", "цена": 2000, "количество": 7, "eд": "шт."})]

names_lst = []
prices_lst = []
counts_lst = []
units_lst = []
res_dict = {}
for i in range(len(my_lst)):
    names_lst.append(my_lst[i][1]['название'])
    prices_lst.append(my_lst[i][1]['цена'])
    counts_lst.append(my_lst[i][1]['количество'])
    units_lst.append(my_lst[i][1]['eд'])

res_dict.update({'названия': names_lst, 'цены': prices_lst, 'количества': counts_lst, 'единицы': units_lst})
print(res_dict)
